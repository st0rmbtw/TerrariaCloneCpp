#version 450 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(binding = 2) uniform GlobalUniformBuffer {
    mat4 screen_projection;
    mat4 view_projection;
    mat4 nonscale_view_projection;
    mat4 nonscale_projection;
    mat4 transform_matrix;
    mat4 inv_view_proj;
    vec2 camera_position;
    vec2 window_size;
    float max_depth;
    float max_world_depth;
} global_ubo;

layout(binding = 5) buffer TransformsBuffer
{
   vec4 transforms[];
};

layout(binding = 6) readonly buffer PositionsBuffer
{
   vec2 positions[];
};

layout(binding = 7) readonly buffer RotationsBuffer
{
   vec4 rotations[];
};

layout(binding = 8) readonly buffer ScalesBuffer
{
   float scales[];
};

const vec2 PARTICLE_SIZE = vec2(8.0, 8.0);

void main() {
    uint id = gl_GlobalInvocationID.x;

    vec2 position = positions[id];
    vec4 rotation = rotations[id];
    float scale = scales[id];

    float qxx = rotation.x * rotation.x;
    float qyy = rotation.y * rotation.y;
    float qzz = rotation.z * rotation.z;
    float qxz = rotation.x * rotation.z;
    float qxy = rotation.x * rotation.y;
    float qyz = rotation.y * rotation.z;
    float qwx = rotation.w * rotation.x;
    float qwy = rotation.w * rotation.y;
    float qwz = rotation.w * rotation.z;

    mat4 rotation_matrix = mat4(
        vec4(1.0 - 2.0 * (qyy + qzz), 2.0 * (qxy + qwz), 2.0 * (qxz - qwy), 0.0),
        vec4(2.0 * (qxy - qwz), 1.0 - 2.0 * (qxx +  qzz), 2.0 * (qyz + qwx), 0.0),
        vec4(2.0 * (qxz + qwy), 2.0 * (qyz - qwx), 1.0 - 2.0 * (qxx +  qyy), 0.0),
        vec4(0.0, 0.0, 0.0, 1.0)
    );

    vec2 size = PARTICLE_SIZE * scale;
    vec2 offset = -0.5 * size;

    mat4 transform = mat4(
        vec4(1.0,        0.0,        0.0, 0.0),
        vec4(0.0,        1.0,        0.0, 0.0),
        vec4(0.0,        0.0,        1.0, 0.0),
        vec4(position.x, position.y, 0.0, 1.0)
    );

    transform = transform * rotation_matrix;

    // translate
    transform[3] = transform[0] * offset[0] + transform[1] * offset[1] + transform[2] * 0.0 + transform[3];

    // scale
    transform[0] = transform[0] * size[0];
    transform[1] = transform[1] * size[1];

    mat4 mvp = global_ubo.view_projection * transform;

    transforms[id * 4 + 0] = mvp[0];
    transforms[id * 4 + 1] = mvp[1];
    transforms[id * 4 + 2] = mvp[2];
    transforms[id * 4 + 3] = mvp[3];
}